package controller;
import hashing.*;

import java.util.ArrayList;
import java.util.List;
import model.*;
import algoritOrdenacao.*;

public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {

		ManipulacaoTXT arquivoTxt = new ManipulacaoTXT();
		List<Integer> listEntradas = new ArrayList<Integer>();
		List<Integer> listUserIdAux = new ArrayList<Integer>();
		LeituraCSV obj = new LeituraCSV();
		List<Ratings> listRatings = new ArrayList<Ratings>();
		
		arquivoTxt.ler(listEntradas);
		System.out.println("---------------Objetos dentro da lista---------------");
		System.out.println("Valores de entrada");
		for(int i =0; i < listEntradas.size(); i++){
			System.out.println("listEntradas.get("+i+") = " + listEntradas.get(i));
		}
		
		obj.lerRatings(listEntradas.get(0), listRatings);
		
		System.out.println("---------------Objetos dentro da lista---------------");
		for(int i =0; i < listRatings.size(); i++){
			System.out.println("User ID "+ listRatings.get(i).getUserId() + " MovieID: " + listRatings.get(i).getMovieId());
			listUserIdAux.add(listRatings.get(i).getUserId());
		}
		
		InsertionSort objInsertion = new InsertionSort();
		BubbleSort objBubble = new BubbleSort();
		SelectionSort objSelection = new SelectionSort();
		MergeSort objMerge = new MergeSort();
		QuickSort objQuick = new QuickSort();
		HeapSort objHeap = new HeapSort();
		MeuSort objMeuSort = new MeuSort();
		HashEnderecamentoAbertoSondagemLinear objHashLinear;
		HashEnderecamentoAbertoSondagemQuadratica objHashQuadratico;
		HashEnderecamentoAbertoHashDuplo objDuploHash;
		HashEncadeamentoSeparado objSeparado;
		
		
		
		//long tempoInicio = System.currentTimeMillis();
		//objInsertion.ordenaInsertSort(listUserIdAux);
		//long tempoFinal = System.currentTimeMillis()-tempoInicio;
		//arquivoTxt.gravar(listEntradas.get(5), tempoFinal);
		//System.out.println("Tempo de processamento: " + tempoFinal + " milissegundos.");
		//objInsertion.imprimeArray(listInteiros);
		
		//objBubble.ordenaBubbleSort(listInteiros);
		//objBubble.imprimeArray(listInteiros);
		
		//objSelection.ordenaSelectionSort(listInteiros);
		//objSelection.imprimeArray(listInteiros);
		
		//long tempoInicio = System.currentTimeMillis();
		//objMerge.ordenaMergeSort(listUserIdAux);
		//long tempoFinal = System.currentTimeMillis()-tempoInicio;
		//arquivoTxt.gravar(listEntradas.get(5), tempoFinal);
		//System.out.println("Tempo de processamento: " + tempoFinal + " milissegundos.");
		//objMerge.imprimeArray(listInteiros);
		
		//long tempoInicio = System.currentTimeMillis();
		//objQuick.ordenaQuickSort(listUserIdAux, 0, listUserIdAux.size()-1);
		//long tempoFinal = System.currentTimeMillis()-tempoInicio;
		//System.out.println("Tempo de processamento: " + tempoFinal + " milissegundos.");
		//arquivoTxt.gravar(1000, tempoFinal);
		//objQuick.imprimeArray(listInteiros);
		
		//long tempoInicio = System.currentTimeMillis();
		//objHeap.ordenaHeapSort(listUserIdAux);
		//long tempoFinal = System.currentTimeMillis()-tempoInicio;
		//System.out.println("Tempo de processamento: " + tempoFinal + " milissegundos.");
		//arquivoTxt.gravar(listEntradas.get(5), tempoFinal);
		//objHeap.imprimeArray(listInteiros);
		
		
		//long tempoInicio = System.currentTimeMillis();
		//objMeuSort.ordenaMeuSort(listUserIdAux);
		//long tempoFinal = System.currentTimeMillis()-tempoInicio;
		//System.out.println("Tempo de processamento: " + tempoFinal + " milissegundos.");
		//arquivoTxt.gravar(listEntradas.get(5), tempoFinal);
		//objMeuSort.imprimeArray(listInteiros);
		
		
		//objHashLinear = new HashEnderecamentoAbertoSondagemLinear(listEntradas.get(0));
		//objHashQuadratico = new HashEnderecamentoAbertoSondagemQuadratica(listEntradas.get(0));
		//objDuploHash = new HashEnderecamentoAbertoHashDuplo(listEntradas.get(0));
		//objSeparado = new HashEncadeamentoSeparado(listEntradas.get(5));
		
		
		//long tempoInicio = System.currentTimeMillis();
		//for(int i = 0; i < listEntradas.get(0); i++){
		//	objDuploHash.insere(listRatings.get(i).getUserId(), listRatings.get(i).getMovieId());
		//}
		//long tempoFinal = System.currentTimeMillis()-tempoInicio;
		//System.out.println("Tempo de processamento: " + tempoFinal + " milissegundos.");
		//arquivoTxt.gravar(listEntradas.get(5), tempoFinal);
		//objHashLinear.imprimirTabelaHash();
		
		
		
	}
	
	

}
